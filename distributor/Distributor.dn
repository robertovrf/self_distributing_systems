const char debugMSG[]	  = "[@Distributor]"

const char HELP[]       = "help"
const char ALTERNATE[]  = "alternate"
const char PROPAGATE[]  = "propagate"
const char SHARDING[]   = "sharding"
const char DYNAMIC[]    = "dynamic"
const char LOCAL[]      = "local"
const char PERCEPTION[] = "perception"
const char TEST[]		= "test"
const char TEST2[]		= "test2"
const char TEST3[]		= "test3"
const char TEST4[]		= "test4"
const char EXIT[]       = "exit"
const int PORT			= 3500

component provides App requires io.Output out, data.StringUtil strUtil, data.IntUtil iu, io.Input in, 
	monitoring.Perception, data.json.JSONEncoder encoder, data.DecUtil du, time.Timer t, 
	http.HTTPUtil httpUtil, net.TCPSocket, net.TCPServerSocket {

	String remoteConfigs[] 		= null
	String localConfigs[] 		= null
	String distributedProxies[] = null
	Perception perception 		= null
	String configs[]			= null
	int currentConfigIndex		= 0

	void help() {
		out.println("Command list:")
		out.println(" $(HELP) - to list all commands")
		out.println(" $(ALTERNATE) - to distribute list alternating requests between replicas")
		out.println(" $(PROPAGATE) - to distribute list propagating write requests to all replicas")
		out.println(" $(SHARDING) - to distribute list with sharding")
		out.println(" $(DYNAMIC) - to distribute list with dynamic sharding")
		out.println(" $(LOCAL) - to bring list locally")
		out.println(" $(PERCEPTION) - to get perception data from the current running composition")
		out.println(" $(EXIT) - to finish execution")
	}

	void local() {
		perception.setConfig(localConfigs[0].string)
		out.println("$(debugMSG) Local composition running.")
		currentConfigIndex = 0
	}

	void distribute(char proxyInterface[]) {
		if (proxyInterface == "ListCPPropagate.o") { currentConfigIndex = 1 }
		else if (proxyInterface == "ListCPAlternate.o") { currentConfigIndex = 2 }
		else if (proxyInterface == "ListCPSharding.o") { currentConfigIndex = 3 }
		else if (proxyInterface == "ListCPDynamicSharding.o") { currentConfigIndex = 4 }

		char remoteConfig[] = getRemoteConfig("data/adt/$(proxyInterface)")
		if (remoteConfig != null) {
			perception.setConfig(remoteConfig)
			out.println("$(debugMSG) Remote composition [($proxyInterface)] running.")	
		} else {
			throw new Exception("Something went wrong! Couldn't find remote proxy.")
		}
	}

	void perception() {
		//char jsonPD[] = perception.getPerceptionData()
		//out.println("$(debugMSG) $(jsonPD)")
		PerceptionData pD[] = encoder.jsonToArray(perception.getPerceptionData(), typeof(PerceptionData[]), null)
		for (int i = 0; i < pD.arrayLength; i++) {
			for (int cMetrics = 0; cMetrics < pD[i].metrics.arrayLength; cMetrics++) {
				dec value = pD[i].metrics[cMetrics].value
				dec counter = pD[i].metrics[cMetrics].counter
				dec avgRT = value/counter
				out.println("$(debugMSG) Avg response time: $(du.decToString(avgRT))")
			}
			for (int cEvents = 0; cEvents < pD[i].events.arrayLength; cEvents++) {
				out.println("$(debugMSG) Request type: $(pD[i].events[cEvents].type) - $(pD[i].events[cEvents].counter) ")
			}
		}
	}

	dec getAvgResponseTime() {
		PerceptionData pD[] = encoder.jsonToArray(perception.getPerceptionData(), typeof(PerceptionData[]), null)
		dec result = 0.0
		if ((pD != null) && (pD[0].metrics.arrayLength > 0)) {
			dec value = pD[0].metrics[0].value
			dec counter = pD[0].metrics[0].value
			result = value/counter
		}
		return result
	}

	void observationLoop(int numCycles, int observationWindow) {
		getAvgResponseTime()
		for (int i = 0; i < numCycles; i++) {
			t.sleep(observationWindow)
			out.println("$(debugMSG) $(du.decToString(getAvgResponseTime()))")
		}
	}

	void commandInterpret(char cmd[]) {
		String cmdList[] = strUtil.explode(cmd, " ")
		if (cmdList.arrayLength == 1) {
			if (cmd == HELP) {
				help()
			} else if (cmd == PROPAGATE) {
				distribute("ListCPPropagate.o")
			} else if (cmd == ALTERNATE) {
				distribute("ListCPAlternate.o")
			} else if (cmd == SHARDING) {
				distribute("ListCPSharding.o")
			} else if (cmd == DYNAMIC) {
				distribute("ListCPDynamicSharding.o")
			} else if (cmd == LOCAL) {
				local()
			} else if (cmd == PERCEPTION) {
				perception()
			} else if (cmd == TEST) {
				out.println("$(debugMSG) Starting test...")
				local()
				observationLoop(10, 1000)
				distribute("ListCPPropagate.o")
				observationLoop(10, 1000)
				distribute("ListCPAlternate.o")
				observationLoop(10, 1000)
				distribute("ListCPSharding.o")
				observationLoop(10, 1000)
				out.println("$(debugMSG) Test finished!")
			} else if (cmd == TEST2) { 
				out.println("$(debugMSG) Starting tests...")
				t.sleep(10000)
				distribute("ListCPPropagate.o")
				t.sleep(10000)
				local()
				t.sleep(10000)
				out.println("$(debugMSG) End tests...")
			} else if (cmd == TEST3) {
				out.println("$(debugMSG) Starting tests...")
				local()
				t.sleep(10000)
				t.sleep(10000)
				t.sleep(10000)
				out.println("$(debugMSG) End tests...")
			} else if (cmd == TEST4) {
				local()
				t.sleep(90000)
				distribute("ListCPPropagate.o")
				t.sleep(180000)
				local()
				t.sleep(90000)
			} else {
				out.println("Invalid command.")
			}
		}
	}

	char[] getRemoteConfig(char proxy[]) {
		for (int pointer = 0; pointer < remoteConfigs.arrayLength; pointer++) {
			if (strUtil.find(remoteConfigs[pointer].string, proxy) != StringUtil.NOT_FOUND) {
				return remoteConfigs[pointer].string
			}
		}
		return null
	}

	// Guess there's a better way of doing this...
	void remoteLocalSeparation() {
		if ((remoteConfigs == null) || (localConfigs == null)) {
			out.println("$(debugMSG) Separating local and remote compositions...")
			String configsHelper[] = perception.getAllConfigs()
			for (int confPointer = 0; confPointer < configsHelper.arrayLength; confPointer++) {
				bool remote = false
				for (int distProxy = 0; distProxy < distributedProxies.arrayLength; distProxy++) {
					if (strUtil.find(configsHelper[confPointer].string, distributedProxies[distProxy].string) 
						!= StringUtil.NOT_FOUND) {
						remoteConfigs = new String[](remoteConfigs, configsHelper[confPointer])
						remote = true
						break
					}
				}
				if (!remote) {
					localConfigs = new String[](localConfigs, configsHelper[confPointer])
				}
			}
		}
	}

	// TODO: dynamically load the names of distributed proxies from the folder distributor/data/adt/
	// currently hard-coded 
	void loadDistributedProxies() {
		if (distributedProxies == null) {
			distributedProxies = new String[](
				new String("ListCPPropagate.o"),
				new String("ListCPAlternate.o"),
				new String("ListCPSharding.o"),
				new String("ListCPDynamicSharding.o")
			)
		}
	}

	void changeConfiguration(int newConfigurationIndex) {
		// this is hard-coded for now...
		if (newConfigurationIndex == 0) { local() }
		else if (newConfigurationIndex == 1) { distribute("ListCPPropagate.o") }
		else if (newConfigurationIndex == 2) { distribute("ListCPAlternate.o") }
		else if (newConfigurationIndex == 3) { distribute("ListCPSharding.o") }
		else if (newConfigurationIndex == 4) { distribute("ListCPDynamicSharding.o") }
	}

	dec averageResponseTime(Metric m) {
		out.println("IV $(iu.intToString(m.value)) / $(iu.intToString(m.counter)) ")
		dec value =  m.value
		dec counter = m.counter
		return value / counter 
	}

	void sendResponse(HTTPMessage httpMessage, char response[]) {
		httpMessage.socket.send("HTTP/1.1 200 OK\r\n")
		httpMessage.socket.send("Server: $(HTTPUtil.SERVER_NAME)\r\n")
		httpMessage.socket.send("Content-Encoding: binary\r\n")
		httpMessage.socket.send("Content-Length: $(iu.intToString(response.arrayLength))\r\n")
		httpMessage.socket.send("Connection: close\r\n")
		httpMessage.socket.send("Content-Type: $(httpMessage.mimeType)\r\n")
		httpMessage.socket.send("\r\n")
		httpMessage.socket.send(response)
	}

	void startAPI() {
		TCPServerSocket host = new TCPServerSocket()
		// binding server socket
		if (!host.bind(TCPServerSocket.ANY_ADDRESS, PORT)) {
			out.println("Error: failed to bind master socket")
			return
		}
		while (true) {
			TCPSocket client = new TCPSocket()
			if (client.accept(host)) {
				HTTPMessage message = httpUtil.readHTTPRequest(client)
				// GET /ucb/init
				if (strUtil.ifind(message.resource, "/ucb/init") != StringUtil.NOT_FOUND && (message.command == "GET")) {
					sendResponse(message, iu.intToString(configs.arrayLength))
				}
				// GET /ucb/perception-data
				if (strUtil.ifind(message.resource, "/ucb/perception-data") != StringUtil.NOT_FOUND && (message.command == "GET")) {
					PerceptionData pD[] = encoder.jsonToArray(perception.getPerceptionData(), typeof(PerceptionData[]), null)
					PerceptionData perceptionData = pD[0]
					bool hasMetric = false
					for (int j = 0; j < perceptionData.metrics.arrayLength; j++) {
						if (perceptionData.metrics[j].name == "response_time") {
							hasMetric = true
							dec responseTime = averageResponseTime(perceptionData.metrics[j])
							char response[] = new char[](
								iu.intToString(currentConfigIndex), 
								"|", 
								du.decToString(responseTime))
								sendResponse(message, response)
						}
					}	
					if (!hasMetric) {
						sendResponse(message, "NOT FOUND")
					}
				}
				// POST /ucb/composition
				if (strUtil.ifind(message.resource, "/ucb/composition") != StringUtil.NOT_FOUND && (message.command == "POST")) {
					// TODO: create a mechanism to verify whether the adaptation happened or not
					// and send a reply message accordingly
					changeConfiguration(iu.intFromString(message.postData))
					sendResponse(message, "OK")
				}
			}
		}
	}

	int App:main(AppParam params[]) {
		perception = new Perception(true)
		/* Loading target system and adding a monitoring proxy to it */
		perception.setMain("../server/main.o", null)
		perception.addProxy("|../distributor/monitoring/proxies/ServerProxy.o|*(*:server.Server[0]:*)|")
		configs = perception.getAllConfigs()
		for (int i = 0; i < configs.arrayLength; i++) {
			out.println("$(debugMSG) $(iu.intToString(i+1)): $(configs[i].string)")
		}
		loadDistributedProxies()
		remoteLocalSeparation()
		local()
		asynch::startAPI()
		/* command prompt */
		char cmd[] = "start"
		while (cmd != "exit") {
			if (cmd != "start") { commandInterpret(cmd)	}
			out.print("distributor> ")
			cmd = in.readln()
		}
		return 0
	}
}

