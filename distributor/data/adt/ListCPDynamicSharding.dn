data Param {
	char value[]
}

data Request {
	char functionName[]
	int numParams
	Param params[]
}

data Response {
	// 1 OK - 2 FAILED
	byte status
	// if it's null or "" this has to be translated to null
	char value[]
}

data IPAddr {
	char ip[]
	int port
}

data Int {
	int i
}

data ShardState {
	Int state[]
}

/* Available list operations */
const char ADD[]          = "add"
const char GET_LENGTH[]   = "getLength"
const char GET_CONTENTS[] = "getContents"
const char DELETE[] 	  = "delete"
const char CLEAR_LIST[]   = "clearList"

/* IPs */
const char IMPLEMENTATION_PROVIDER_HOST[] = "http://172.18.0.2:8000"

component provides List:heap(Destructor, AdaptEvents) requires data.json.JSONEncoder parser,
	net.TCPSocket, data.StringUtil strUtil, io.Output out, data.IntUtil iu,
	hash.Multiplicative hash, net.http.HTTPRequest http, util.Math math
{
	IPAddr implementationProviderIP = null
	IPAddr remoteListsIps[] = null
	int shards = 2

	void setupRemoteListsIPs(String ips[]) {
		remoteListsIps = new IPAddr[ips.arrayLength]
		for (int i = 0; i < ips.arrayLength; i++) {
			remoteListsIps[i] = new IPAddr()
			remoteListsIps[i].ip = new char[](ips[i].string)
			remoteListsIps[i].port = 2010
		}
	}

	Response parseResponse(char content[]) {
		String helper[] = strUtil.explode(content, "!")
		Response response
		if (helper.arrayLength > 1) {
			response = parser.jsonToData(helper[0].string, typeof(Response), null)
			Response response2 = new Response()
			response2.value = helper[1].string
			response2.status = response.status
			response = response2
		} else {
			response = parser.jsonToData(content, typeof(Response), null)
		}
		return response
	}

	Response readResponse(TCPSocket s) {
		Response response = null
		char buf[] = null
		int len = 0
		char command[] = null
		while ((buf = s.recv(1)).arrayLength > 0) {
			command = new char[](command, buf)
			len++

			if (command == "OK") {
				break
			}

			//stop condition
			if (len >= 4) {
				if ((command[len-4] == "\r") && (command[len-3] == "\r") &&
					(command[len-2] == "\r") && (command[len-1] == "\r")) {
					response = parseResponse(strUtil.subString(command,
						0, command.arrayLength-4))
					break
				}
			}
		}

		if (response == null) { s.disconnect() }
		return response
	}

	bool establishConnection(IPAddr addr, TCPSocket remoteObj) {
		if (!remoteObj.connect(addr.ip, addr.port)) {
			out.println("Connection error!")
			return false
		}
		return true
	}

	Response makeRequest(IPAddr addr, char content[], bool readResponse) {
    TCPSocket remoteObj = new TCPSocket()
		Response resp = null
		if (establishConnection(addr, remoteObj)) {
			remoteObj.send(content)
			if (readResponse) { resp = readResponse(remoteObj) }
			remoteObj.disconnect()
		}
		return resp
	}

	void List:add(Data item) {
		// build request
		Request request = new Request()
		request.functionName = ADD
		request.numParams = 1
		char requestStr[] = parser.jsonFromData(request, null)
		char param[] = parser.jsonFromData(item, null)
		char content2[] = new char[](requestStr, "!", param, "\r\r\r\r")
		// get the replica IP based on the item hash
		Int num = item
		IPAddr addr = remoteListsIps[hash.h(num.i, remoteListsIps.arrayLength)]
		// send to remote list
		makeRequest(addr, content2, true)
	}

	void List:remove(Data item) {
		Request request = new Request()
		request.functionName = DELETE
		request.numParams = 1
		char requestStr[] = parser.jsonFromData(request, null)
		char itemParam[] = parser.jsonFromData(item, null)
		char requestContent[] = new char[](requestStr, "!", itemParam, "\r\r\r\r")
		
		Int num = item
		IPAddr addr = remoteListsIps[hash.h(num.i, remoteListsIps.arrayLength)]
		makeRequest(addr, requestContent, true)
	}

	void List:update(Data item, Data newVersion) {
		// TODO
	}

	Data List:getFirst() {
		// TODO
		return null
	}

	Data List:getNext() {
		// TODO
		return null
	}

	bool List:isEnd() {
		// TODO
		return false
	}

	Data List:getIndex(int ndx) {
		// TODO
		return null
	}

	void List:setIndex(int ndx, Data d) {
		//TODO
	}

	int List:getLength() {
		// build request
		Request request = new Request()
		request.functionName = GET_LENGTH
		request.numParams = 0
		char requestStr[] = parser.jsonFromData(request, null)
		char content2[] = new char[](requestStr, "!", " ", "\r\r\r\r")
		// get the length from each replica to return the full length
		int totalContents = 0
		for (int i = 0; i < remoteListsIps.arrayLength; i++) {
			Response response = makeRequest(remoteListsIps[i], content2, true)
			totalContents += iu.intFromString(response.value)
		}
		return totalContents
	}

	Data[] List:getContents(opt Type t) {
		// build request
		out.println("Getting dynamic sharding contents")
		Request request = new Request()
		request.functionName = GET_CONTENTS
		request.numParams = 0
		char requestStr[] = parser.jsonFromData(request, null)
		char content2[] = new char[](requestStr, "!", " ", "\r\r\r\r")
		// get the contents from all replicas
		Int contents[] = null
		for (int i = 0; i < remoteListsIps.arrayLength; i++) {
			out.println("Sending request to $(remoteListsIps[i].ip)")
			Response response = makeRequest(remoteListsIps[i], content2, true)
			Int nums[] = parser.jsonToArray(response.value, typeof(Int[]), null)
			contents = new Int[](contents, nums)
		}
		return contents
	}

	void buildFromArray(Data items[]) {
		// TODO
	}

	bool List:clone(Object o) {
		// TODO
		return false
	}

	void clearList() {
		// TODO
	}

	void Destructor:destroy() {
	}

	void AdaptEvents:inactive() {
		if (content == null) {
			out.println("Content is null, skipping...")
			return
		}

		content = getContents()
		char msg[] = "{\"implementation\":\"../distributor/RemoteList.o\"}"
		HTTPResponse resp = http.post(new char[](IMPLEMENTATION_PROVIDER_HOST, "/destroy"), null, msg)
	}

	void AdaptEvents:active() {
		out.println("Dynamic Sharding connected")
		if (content == null) {
			out.println("Content is null, skipping...")
			return
		}

		int length = content.arrayLength
		out.println("Length is $(length)")
		shards = 1
		if (length >= 9000) {
			shards = 8
		} else if (length >= 6000) {
			shards = 4
		} else if (length >= 2000 ) {
			shards = 2
		}

		ShardState shardState[] = new ShardState[shards]
		for (int i = 0; i < content.arrayLength; i++) {
			Int num = content[i]
			int remoteIdx = hash.h(num.i, shards)
			if (shardState[remoteIdx] == null) {
				shardState[remoteIdx] = new ShardState()
			}
			shardState[remoteIdx].state = new Int[](shardState[remoteIdx].state, num)
		}

		char msg[] = new char[]("{\"implementation\":\"../distributor/RemoteList.o\",\"replicas\":$(shards),\"metadata\":[")
		for (int i = 0; i < shards; i++) {
			char state[] = null
			if (shardState[i] != null) {
				state = parser.jsonFromArray(shardState[i].state, null)
			}

			if (state == null) {
				state = "[]"
			}

			msg = new char[](msg, "{\"STATE\":$(state)}")
			if (i < shards - 1) {
				msg = new char[](msg, ",")
			}
		}

		msg = new char[](msg, "]}")
		HTTPResponse resp = http.post(new char[](IMPLEMENTATION_PROVIDER_HOST, "/distribute"), null, msg)
		String ips[] = parser.jsonToArray(resp.content, typeof(String[]), null)
		setupRemoteListsIPs(ips)
	}
}
